---
description: 
globs: 
alwaysApply: true
---
## テストコード生成ルール

以下のルールに従い、Swift Testing を用いたテストコードを記述してください。

### 使用するテストフレームワーク

* テストコードはすべて [Swift Testing](mdc:https:/developer.apple.com/documentation/testing) を使用してください。
* XCTest は使用しないでください。

### テストコードの記述形式

* テストコードは `struct` を用いて記述してください。`class` は使用しないでください。
* アサーションには `#expect` マクロを使用してください。
* 失敗時の処理には `Issue.record ` を用いて記述してください。

### パラメータ化の活用

* パラメータ化（parameterized test）が利用できる場合は、積極的に活用してください。
* ただし、パラメータ数が多くなりすぎる場合は、適宜メソッドを分割して記述してください。

### @MainActor の付与

* UI操作（ボタンタップ、画面遷移、Viewの表示状態確認など）を含むテストメソッドには、`@MainActor` を付与してください。

### Suiteの同期実行（.serialized の付与）

以下のいずれかを利用するテストコードでは、`@Suite(.serialized)` を使用して同期実行としてください：

* `UserDefaults`
* データベース（例：`Realm` など）
* `NotificationCenter`
* シングルトン（共有インスタンス）

### テストの実行と確認

* テストコードを生成した後は、必ずテストを実行し、以下を確認してください：

  * コンパイルエラーがないこと
  * すべてのテストが成功すること

### その他

* テストケース名やメソッド名は、テスト対象の動作や条件が明確に分かる名前を付けてください。
* 必要に応じて、モックやスタブを利用して副作用を抑制してください。
